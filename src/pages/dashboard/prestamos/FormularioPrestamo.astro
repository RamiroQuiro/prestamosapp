---
import { db } from "astro:db";
import Button1 from "../../../components/atomos/Button1.astro";
import FormCont from "../../../components/atomos/FormCont.astro";
import ContenedorBoton from "../../../components/moleculas/ContenedorBoton.astro";
import ContenedorInputForm from "../../../components/moleculas/ContenedorInputForm.astro";
import ContenedorInputSelected from "../../../components/moleculas/ContenedorInputSelected.astro";
import { Intereses } from "astro:db";
import { eq } from "astro:db";
import { nCuotas } from "astro:db";
import LabelForm from "@/components/atomos/LabelForm.astro";

const { id } = Astro.locals.user;

let interes = [
  {
    id: 1,
    value: 5,
  },
  {
    id: 2,
    value: 10,
  },
  {
    id: 3,
    value: 15,
  },
];
let cuotas = [
  { id: 1, value: 3 },
  { id: 2, value: 6 },
  { id: 3, value: 9 },
  { id: 4, value: 12 },
];
const modalidad = [
  { name: "semanal", id: 1, value: 7 },
  { name: "quincenal", id: 2, value: 15 },
  { name: "mensual", id: 3, value: 30 },
];

try {
  const interesesUser = await db
    .select()
    .from(Intereses)
    .where(eq(Intereses.usuarioId, id));
  const nCuotasUser = await db
    .select()
    .from(nCuotas)
    .where(eq(nCuotas.usuarioId, id));
  interes = [...interes, ...interesesUser];
  cuotas = [...cuotas, ...nCuotasUser];
} catch (error) {
  console.log(error);
}
---

<FormCont>
  <ContenedorInputForm
    label="Cliente"
    type="text"
    name="selectCliente"
    styleInput="font-semibold"
  />
  <div class="flex items-center w-full justify-normal">
    <ContenedorInputForm
      label="importe de credito"
      type="number"
      name="importeCredito"
    />
    <ContenedorInputSelected
      label="Modalidad de Pago"
      name="modalidad"
      options={modalidad}
    />
  </div>
  <div class="flex items-center w-full justify-normal">

    <!-- seleccionar intereses -->
    <div
      class="w-full flex items flex-col items-start gap-1 duration-300 group -md p-3"
    >
      <LabelForm>Intereses</LabelForm>
      <select
      id="tipoInteres"
        class={`${"style"} w-full text-sm bg-primary-200/10 group-hover:ring-2 rounded-lg  border-gray-300  ring-primary-200/60 focus:ring-2  outline-none transition-colors duration-200 ease-in-out px-2 py-2`}
      >
        {
          interes.map((opcion) => {
            if (opcion.selectDefault) {
              return (
                <option selected value={opcion.value} id={opcion.id} class="">
                  {opcion.name || opcion.value} %
                </option>
              );
            }
            return (
              <option value={opcion.value} id={opcion.id} class="">
                {opcion.name || opcion.value} %
              </option>
            );
          })
        }
      </select>
    </div>
    <ContenedorInputSelected
      label="N° de Cuotas"
      name="nCuotas"
      options={cuotas}
    />
  </div>

  <ContenedorBoton>
    <Button1 class="" id="simularPrestamo">simular Prestamo</Button1>
  </ContenedorBoton>
</FormCont>

<script>
  import { showToast } from "@/components/Toast/toastShow";
import { busqueda, prestamoSimulado } from "@/context/store";
  import {
    calcularCuota,
    calcularGanancia,
  } from "@/lib/formulas/calcularPrestamo";
  // Nos suscribimos a los cambios en 'busqueda'
  let userId = "";
  let nombreCliente = "";
  const unsubscribe = busqueda.subscribe((clientSelect) => {
    userId = clientSelect.clientSelect.usuarioId;
    nombreCliente = clientSelect.clientSelect.nombre;
    document.getElementById("selectCliente").value = "";
    if (clientSelect.clientSelect.nombre) {
      // Concatenamos los valores de 'nombre', 'apellido' y 'dni'
      const fullName =
        clientSelect.clientSelect.nombre +
        " " +
        clientSelect.clientSelect.apellido +
        "   Dni:" +
        clientSelect.clientSelect.dni;
      document.getElementById("selectCliente").value = fullName || "";
    }
  });

  // formula de calulo de prestamos
  // document.getElementById("simularPrestamo").addEventListener("click", function (e) {
  //     e.preventDefault();
  //     let importe = document.getElementById("importeCredito").value;
  //     let tasaInteres = document.getElementById("tipoInteres").value;
  //     let nCuotas = document.getElementById("nCuotas").value;
  //     let modalidad = document.getElementById("modalidad").value;
  //     let { montoCuota } = calcularCuota(importe, tasaInteres, nCuotas);
  //     let { montoTotal } = calcularCuota(importe, tasaInteres, nCuotas);
  //     let ganancia = calcularGanancia(importe, montoCuota, nCuotas);
  //     const dateNow = new Date();

  //     prestamoSimulado.set({
  //       clienteId: busqueda.get().clientSelect.id,
  //       usuarioId: userId,
  //       nombreCliente: "",
  //       montoCuota: montoCuota,
  //       nCuotas: nCuotas,modalidad,
  //       capital: importe,
  //       tasaInteres: tasaInteres,
  //       interesGenerado: ganancia,
  //       montoTotal: montoTotal,
  //       fechaInicio: dateNow,
  //     });
  //   });

  document
    .getElementById("simularPrestamo")
    .addEventListener("click", async function (e) {
      e.preventDefault();

      let importe = document.getElementById("importeCredito").value;
      let tasaInteres = document.getElementById("tipoInteres").value;
      let nCuotas = document.getElementById("nCuotas").value;
      let modalidad = document.getElementById("modalidad").value;


      try {
        const response = await fetch(`/api/prestamos/calcularPrestamo`, {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({
            usuarioId: userId,
            importe: parseFloat(importe),
            tasaInteres: parseFloat(tasaInteres),
            nCuotas: parseInt(nCuotas),
            modalidad
          }),
        });

        const data = await response.json();

        if (response.ok) {
          const { cuotas, montoTotal, ganancia } = data;
          prestamoSimulado.set({
            clienteId: busqueda.get().clientSelect.id,
            usuarioId: userId,
            nombreCliente: "",
            cuotas: cuotas,
            nCuotas: cuotas.length,
            modalidad,
            capital: importe,
            tasaInteres: tasaInteres,
            interesGenerado: ganancia,
            montoTotal: montoTotal,
            fechaInicio: new Date(),
          });
        } else {
          showToast('error al generar prestamos',{background:'bg-red-600'})
          console.log("Error en el cálculo del préstamo:", data.message);
        }
      } catch (error) {
        console.error("Error en la solicitud:", error);
      }
    });
</script>

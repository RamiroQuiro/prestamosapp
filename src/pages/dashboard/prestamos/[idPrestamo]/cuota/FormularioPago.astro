---
import Button1 from "@/components/atomos/Button1.astro";
import FormCont from "@/components/atomos/FormCont.astro";
import SelectedFormulario from "@/components/atomos/SelectedFormulario.astro";
import ContenedorInputForm from "@/components/moleculas/ContenedorInputForm.astro";
import db from "@/db";
import { moraCuotas } from "@/db/schema/mora.sql";
import { eq } from "drizzle-orm";


const {
  data: { cuota, cliente, prestamo },
  montoRestanteCuota,
} = Astro.props;
const { id } = Astro.locals.user;

let tasaInteresMora = 0;
try {
  const dataDb = await db
    .select()
    .from(moraCuotas)
    .where(eq(moraCuotas.usuarioId, id));
  tasaInteresMora = dataDb[0].value;
} catch (error) {
  console.log(error);
}

const metodoPagos = [
  {
    value: "efectivo",
    id: 1,
    name: "efectivo",
  },
  {
    value: "trasnferecia",
    id: 2,
    name: "transferencia",
  },
  {
    value: "deposito",
    id: 3,
    name: "deposito",
  },
];
---

<FormCont title="Nuevo Pago" id="nuevoPago">
  <div
    id="idCuota"
    data-idCuota={cuota?.id}
    class="flex md:flex-row text-sm font-semibold items-center gap-2 w-full justify-normal"
  >
    <span>Id de Cuota : </span><p>{cuota?.id}</p>
  </div>
  <div
    id="moraId"
    data-moraInteres={tasaInteresMora}
    class="flex md:flex-row items-center gap-2 w-full justify-normal"
  >
    <ContenedorInputForm
      label="nombre"
      type="text"
      name="nombre"
      styleInput=""
      disabled={true}
      value={cliente?.nombre}
    />
    <ContenedorInputForm
      label="apellido"
      type="text"
      name="apellido"
      disabled={true}
      value={cliente?.apellido}
    />
  </div>
  <div class="flex md:flex-row items-center gap-2 w-full justify-normal">
    <ContenedorInputForm
      label="DNI"
      type="text"
      name="dni"
      disabled={true}
      value={cliente?.dni}
    />
    <ContenedorInputForm
      label="Id Prestamo"
      type="text"
      name="dni"
      disabled={true}
      value={prestamo?.id}
    />
  </div>
  <div
    data-fechaVencimiento={cuota?.fechaVencimiento}
    data-montoCuota={montoRestanteCuota == 0 ? cuota?.monto : montoRestanteCuota}
    id="fechaVencimiento"
    class="flex md:flex-row items-center gap-2 w-full justify-normal"
  >
    <ContenedorInputForm
      label="monto cuota"
      type="text"
      name="montoCuota"
      disabled={true}
      value={`$ ${montoRestanteCuota == 0 ? cuota?.monto?.toLocaleString() : montoRestanteCuota?.toLocaleString()}`}
    />
    <ContenedorInputForm
      disabled={true}
      label="Fecha de vencimiento"
      type="text"
      name="fechaVencimiento"
      value={cuota?.fechaVencimiento?.toLocaleDateString()}
    />
  </div>

  <div class="flex md:flex-row items-center gap-2 w-full justify-center">
    <ContenedorInputForm
      label="Monto de Mora"
      disabled={true}
      type="text"
      name="montoMora"
    />
    <label
      for="sinMora"
      class="w-1/6 text-xs flex flex-col items-center gap-2 justify-center"
      >¿Mora?<input
        type="checkbox"
        name="sinMora"
        class=""
        id="sinMora"
      /></label
    >
    <ContenedorInputForm
      label="Fecha de Pago"
      type="date"
      disabled={true}
      name="fechaPago"
    />
  </div>
  <div class="flex md:flex-row items-center gap-2 w-full justify-center">
    <ContenedorInputForm
      label="monto a pagar"
      type="text"
      placeholder=" si no ingresa, sera la cuota total"
      name="montoTotal"
    />
    <div class="flex md:flex-row items-center gap-2 w-full justify-normal">
      <label for="metodoPago" class="text-xs w-">Metodo de pago</label>
      <SelectedFormulario
        defaultSelect={true}
        options={metodoPagos}
        name="metodoPago"
      />
    </div>
  </div>
  <div class="my-2 w-full items-center justify-end flex">
    <Button1 id="pagarCuota">Pagar</Button1>
  </div>
</FormCont>

<script>
  import { showToast } from "@/components/Toast/toastShow";
  import { calcularMora } from "@/lib/formulas/calculoMora";
  import currency from "@/lib/formulas/convertidorMoneda";

  const formulario = document.getElementById("nuevoPago") as HTMLFormElement;
  let mora = 0;
  const montoTotal = document.getElementById("montoTotal");
  const montoMora = document.getElementById("montoMora");
  const sinMora = document.getElementById("sinMora");
  const fechaVencimientoId = document.getElementById("fechaVencimiento");
  const nodoMora = document.getElementById("moraId");
  const tasaInteresMora = nodoMora.getAttribute("data-moraInteres");

  const montoCuota = fechaVencimientoId.getAttribute("data-montoCuota");
  const metodoPago = document.getElementById("metodoPago");
  const formData = new FormData(formulario);
  const data = {};
  // crear  'data' a un objeto con los datos del formulario
  formData.forEach((value, key) => {
    data[key] = value;
  });
  console.log("formulario data ->", montoTotal);

  montoTotal.addEventListener("input", (e) => {
    const cursorPos = e.target.selectionStart;
  });

  // funcion parar obtener del select metodo de pago
  const obtenerMetodoPago = (e) => {
    data["metodoPago"] = e.target.value;
  };
  metodoPago.addEventListener("change", obtenerMetodoPago);
  // Convertir las fechas de string a objetos Date
  const fechaPago = new Date(data.fechaPago);
  // Calcular la diferencia en milisegundos y convertir a días
  const diferenciaMilisegundos = fechaPago - new Date(fechaVencimiento);
  const atrasoDias = Math.ceil(diferenciaMilisegundos / (1000 * 60 * 60 * 24));
  // Asegurarse de que los días de atraso no sean negativos
  const diasDeAtraso = Math.max(0, atrasoDias);
  // console.log('Días de atraso: ', diasDeAtraso);
  data.montoCuota = Number(montoCuota);
  if (diasDeAtraso > 0) {
    sinMora.checked = true;
    // Llamar a la función calcularMora con los días de atraso y cualquier otro dato necesario
    mora = calcularMora(montoCuota, tasaInteresMora, atrasoDias); // Pasa los demás parámetros necesarios
    // console.log('Mora calculada: ', mora);
    montoMora.style.color = "red";
    montoMora.value = `$ ${mora.toFixed(2)}`;
    data.montoMora = mora;
  }
  sinMora.addEventListener("change", (e) => {
    let isChecked = e.target.checked;

    if (!isChecked) {
      data.montoMora = 0;
      montoTotal.value = `$ ${Number(montoCuota).toFixed(2)}`;
    } else {
      data.montoMora = mora;
      montoTotal.value = `$ ${(Number(montoCuota) + Number(mora)).toFixed(2)}`;
    }
  });

  const montoFormat = Number(montoCuota) + Number(mora);
  montoTotal.value = currency(montoFormat);

  //  boton para pagar
  const btnPagar = document.getElementById("pagarCuota");
  const idCuota = document
    .getElementById("idCuota")
    .getAttribute("data-idCuota");
  btnPagar.addEventListener("click", async (e) => {
    e.preventDefault();
    // separar el valuje de monto Total
    // Validación y extracción de valor de montoTotal
    let valor = montoTotal.value.trim();
    if (valor.includes("$")) {
      valor = valor.trim().split("$")[1]
    }
    valor = valor.replace(/\./g, "").replace(",", ".");

// Paso 3: Convertir el valor a número
valor = Number(valor);

    // Verifica que el valor sea un número válido
    if (isNaN(valor)) {
      showToast("Monto inválido. Por favor, verifique el valor ingresado.");
      return;
    }

    data.montoTotal = valor;
    data.montoMora = Number(mora.toFixed(2));

    try {
      const res = await fetch(`/api/pagos/${idCuota}`, {
        method: "POST",
        body: JSON.stringify({
          data,
        }),
      });
      const respuesta = await res.json();
      console.log(respuesta);
      if (respuesta.satatus == 405) {
        showToast("cuota ya pagada");
      }
      if (res.ok) {
        document.location.reload();
      }
    } catch (error) {
      console.log(error);
    }
  });
</script>

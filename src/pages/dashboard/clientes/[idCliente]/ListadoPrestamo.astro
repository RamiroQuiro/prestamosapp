---
import ModuloListadoPrestamo from './ModuloListadoPrestamo'
import db from '@/db';
import {clientes as Cliente, prestamos as Prestamo, pagoParciales as PagoParcial, pagos as Pago} from '@/db/schema'
import { eq } from 'drizzle-orm';
const { idCliente } = Astro.props;


let totalPrestado, totalPagado, prestamosMensuales, pagosMensuales;
function calcularTotalPrestado(prestamos) {
        return prestamos.reduce((total, prestamo) => total + prestamo.capital, 0);
      }
      function calcularTotalPagado(pagos, pagosParciales) {
        const totalPagos = pagos.reduce((total, pago) => total + pago.montoPago, 0);
        const totalPagosParciales = pagosParciales.reduce(
          (total, pago) => total + pago.montoPago,
          0
        );
    
        return totalPagos + totalPagosParciales;
      }
      function pagosPorMes(pagos, pagosParciales) {
        const todosLosPagos = [...pagos, ...pagosParciales];
        return todosLosPagos.reduce((acc, pago) => {
          const mes = pago.fechaPago.getMonth() + 1; // Enero es 0
          const año = pago.fechaPago.getFullYear();
          const clave = `${mes}-${año}`;
    
          if (!acc[clave]) {
            acc[clave] = 0;
          }
          acc[clave] += pago.montoPago;
    
          return acc;
        }, {});
      }
    
      function prestamosFecha(prestamos) {
        const newArray = prestamos.reduce((acc, prestamo) => {
          let formatDate= new Date(prestamo.created_at)
          const mes = formatDate.getMonth() + 1; // Enero es 0
          const año = formatDate.getFullYear();
          const date = prestamo.fechaCreacion;
          const clave = `${mes}-${año}`;
          if (!acc[clave]) {
            acc[clave] = 0;
          }
          acc[clave] += prestamo.capital;
    
          return acc;
        }, {});
        return newArray;
      }

try {

  const resultados = await db
    .select({
      prestamoId: Prestamo.id,
      fechaCreacion: Prestamo.created_at,
      capital: Prestamo.capital,
      montoCuota: Prestamo.montoCuota,
      pagoMonto: Pago.monto,
      pagoFecha: Pago.fechaPago,
      pagoParcialMonto: PagoParcial.monto,
      pagoParcialFecha: PagoParcial.fechaPago,
    })
    .from(Prestamo)
    .leftJoin(Pago, eq(Prestamo.id, Pago.prestamoId))
    .leftJoin(PagoParcial, eq(Prestamo.id, PagoParcial.prestamoId))
    .where(eq(Prestamo.clienteId, idCliente));
    const dataProcesada = resultados.reduce(
    (acc, row) => {
      // Procesar prestamos
      if (!acc.prestamos.some((p) => p.id === row.prestamoId)) {
        acc.prestamos.push({
          id: row.prestamoId,
          fechaCreacion: row.fechaCreacion,
          capital: row.capital,
          montoCuota: row.montoCuota,
        });
      }

      // Procesar pagos completos
      if (row.pagoMonto && row.pagoFecha) {
        acc.pagos.push({
          prestamoId: row.prestamoId,
          fechaPago: row.pagoFecha,
          montoPago: row.pagoMonto,
        });
      }

      // Procesar pagos parciales
      if (row.pagoParcialMonto && row.pagoParcialFecha) {
        acc.pagosParciales.push({
          prestamoId: row.prestamoId,
          fechaPago: row.pagoParcialFecha,
          montoPago: row.pagoParcialMonto,
        });
      }

      return acc;
    },
    { prestamos: [], pagos: [], pagosParciales: [] }
  );

  const { prestamos, pagos, pagosParciales } = dataProcesada;


  // Cálculos como en tu código actual
  const totalPrestado = prestamos.reduce(
    (total, prestamo) => total + prestamo.capital,
    0
  );

  const totalPagado = pagos.reduce(
    (total, pago) => total + pago.montoPago,
    0
  ) + pagosParciales.reduce((total, pago) => total + pago.montoPago, 0);

  const pagosMensuales = pagosPorMes(pagos, pagosParciales); // Reutiliza tu función
  const prestamosMensuales = Object.entries(prestamosFecha(prestamos)); // Reutiliza tu función

  console.log("Total Prestado:", totalPrestado);
  console.log("Total Pagado:", totalPagado);
  console.log("Pagos por Mes:", pagosMensuales);
  console.log("Prestamos por Mes:", prestamosMensuales);
} catch (error) {
  console.log(error);
}
---

<div class="my-3 flex flex-col w-full h-full items-start justify-normal">
 <ModuloListadoPrestamo client:load />
</div>
